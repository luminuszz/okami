// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Category {
  MANGA
  ANIME
}

enum PaymentSubscriptionStatus {
  ACTIVE
  INACTIVE
}

enum RefreshStatus {
  SUCCESS
  FAILED
  PENDING
}

enum NotificationType {
  BROWSER
  MOBILE
}

enum WorkStatus {
  READ
  UNREAD
  FINISHED
  DROPPED
}

enum UserRole {
  ADMIN
  USER
  SUBSCRIBED_USER
}

model Work {
  id                   String         @id @map("_id") @db.ObjectId
  name                 String
  category             Category
  chapters             Float
  url                  String
  recipientId          String?        @unique @map("recipient_id")
  imageId              String?        @map("image_id")
  nextChapter          Float?         @map("next_chapter")
  nextChapterUpdatedAt DateTime?      @map("next_chapter_updated_at")
  isUpserted           Boolean?       @default(false) @map("is_upserted")
  refreshStatus        RefreshStatus? @map("refresh_status")
  status               WorkStatus     @default(READ)
  alternativeName      String?        @default("") @map("alternative_name")
  isFavorite           Boolean?       @default(false) @map("is_favorite")
  description          String?        @default("")

  createdAt DateTime  @map("created_at")
  updatedAt DateTime? @map("updated_at")

  User   User     @relation(fields: [userId], references: [id])
  userId String   @db.ObjectId
  tagsId String[] @map("tags_id") @db.ObjectId

  tags Tag[] @relation(fields: [tagsId], references: [id])

  calendarRows CalendarRow[]
}

model Tag {
  id        String    @id @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  createdAt DateTime  @map("created_at")
  updatedAt DateTime? @map("updated_at")
  color     String    @default("default")

  worksId String[] @map("works_id") @db.ObjectId
  works   Work[]   @relation(fields: [worksId], references: [id])
}

model User {
  id                              String                     @id @map("_id") @db.ObjectId
  email                           String                     @unique
  name                            String
  passwordHash                    String
  createdAt                       DateTime                   @map("created_at")
  updatedAt                       DateTime?                  @map("updated_at")
  imageUrl                        String?                    @default("") @map("image_url")
  adminHashCodeKey                String?                    @map("admin_hash_code_key")
  notionDatabaseId                String?                    @map("notion_database_id")
  paymentSubscriptionId           String?                    @unique @map("payment_subscription_id")
  paymentSubscriberId             String?                    @unique @map("payment_subscriber_id")
  paymentSubscriptionStatus       PaymentSubscriptionStatus? @map("payment_subscription_status")
  trialWorkLimit                  Int?                       @map("trial_work_limit")
  resetPasswordCode               String?                    @map("reset_password_code")
  role                            UserRole                   @default(USER)
  validateEmailCode               String?                    @map("validate_email_code")
  emailIsValidated                Boolean?                   @default(false) @map("email_is_validated")
  emailValidationCodeExpirationAt DateTime?                  @map("email_validation_code_expiration_at")

  accessToken AccessToken?
  Calendar    Calendar?

  worksId      String[]       @map("works_id") @db.ObjectId
  works        Work[]
  Subscriber   Subscriber?
  RefreshToken RefreshToken[]
}

model RefreshToken {
  id            String    @id @map("_id") @db.ObjectId
  token         String    @unique
  expiresAt     DateTime
  userId        String    @db.ObjectId
  createdAt     DateTime  @map("created_at")
  invalidatedAt DateTime? @map("invalidated_at")

  user User @relation(fields: [userId], references: [id])
}

model AccessToken {
  id        String    @id @map("_id") @db.ObjectId
  token     String    @unique
  revokedAt DateTime? @map("revoked_at")

  createdAt DateTime @map("created_at")

  userId String @unique @db.ObjectId

  user User? @relation(fields: [userId], references: [id])
}

enum SearchTokenType {
  ANIME
  MANGA
}

model SearchToken {
  id        String          @id @map("_id") @db.ObjectId
  token     String
  type      SearchTokenType
  createdAt DateTime        @map("created_at")
}

model Notification {
  id           String     @id @map("_id") @db.ObjectId
  subscriberId String     @db.ObjectId
  content      String
  createdAt    DateTime   @default(now())
  readAt       DateTime?
  channels     String[]   @default([])
  providers    String[]   @default(["all"])
  susbscriber  Subscriber @relation(fields: [subscriberId], references: [id])
}

model Subscriber {
  id                   String                @id @map("_id") @db.ObjectId
  telegramId           String?               @unique
  createdAt            DateTime              @default(now())
  recipientId          String                @unique @db.ObjectId
  email                String?               @unique
  mobileSubscriptions  MobileSubscription[]
  notifications        Notification[]
  webPushSubscriptions WebPushSubscription[]
  channelsId           String[]              @db.ObjectId
  authCode             String?               @map("auth_code")
  recipient            User                  @relation(fields: [recipientId], references: [id], onDelete: Cascade)
}

model WebPushSubscription {
  id           String     @id @map("_id") @db.ObjectId
  p256dh       String
  auth         String
  createdAt    DateTime
  updatedAt    DateTime   @updatedAt
  subscriberId String     @db.ObjectId
  endpoint     String
  subscriber   Subscriber @relation(fields: [subscriberId], references: [id])
}

model MobileSubscription {
  id                String     @id @map("_id") @db.ObjectId
  subscriberId      String     @db.ObjectId
  subscriptionToken String     @unique
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  subscriber        Subscriber @relation(fields: [subscriberId], references: [id])
}

model Calendar {
  id          String  @id @map("_id") @db.ObjectId
  userId      String  @unique @map("user_id") @db.ObjectId
  title       String
  description String?

  createdAt DateTime  @map("created_at")
  updatedAt DateTime? @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  rows CalendarRow[]
}

model CalendarRow {
  id        String @id @map("_id") @db.ObjectId
  dayOfWeek Int    @map("day_of_week")

  createdAt DateTime  @map("created_at")
  updatedAt DateTime? @map("updated_at")

  calendarId String @map("calendar_id") @db.ObjectId

  workId String @map("work_id") @db.ObjectId

  Work     Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  Calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
}
