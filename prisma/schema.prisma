// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Category {
  MANGA
  ANIME
}

enum PaymentSubscriptionStatus {
  ACTIVE
  INACTIVE
}


enum RefreshStatus {
  SUCCESS
  FAILED
  PENDING
}

enum NotificationType {
  BROWSER
  MOBILE
}

enum WorkStatus {
  READ
  UNREAD
  FINISHED
  DROPPED
}

 enum UserRole {
  ADMIN
  USER
  SUBSCRIBED_USER
}



model Work {
  id                   String         @id @map("_id") @db.ObjectId
  name                 String
  category             Category
  chapters             Float
  url                  String
  recipientId          String?        @map("recipient_id")
  imageId              String?        @map("image_id")
  nextChapter          Float?         @map("next_chapter")
  nextChapterUpdatedAt DateTime?      @map("next_chapter_updated_at")
  isUpserted           Boolean?       @default(false) @map("is_upserted")
  refreshStatus        RefreshStatus? @map("refresh_status")
  status               WorkStatus     @default(READ)

  createdAt DateTime  @map("created_at")
  updatedAt DateTime? @map("updated_at")

  User          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
}



model User {
  id               String    @id @map("_id") @db.ObjectId
  email            String    @unique
  name             String
  passwordHash     String
  createdAt        DateTime  @map("created_at")
  updatedAt        DateTime? @map("updated_at")
  imageUrl         String?   @default("") @map("image_url")
  adminHashCodeKey String?   @map("admin_hash_code_key")
  notionDatabaseId String?   @map("notion_database_id")
  paymentSubscriptionId String? @map("payment_subscription_id") @unique
  paymentSubscriberId String? @map("payment_subscriber_id") @unique
  paymentSubscriptionStatus PaymentSubscriptionStatus? @map("payment_subscription_status")
  trialWorkLimit   Int?      @map("trial_work_limit")
  resetPasswordCode String?  @map("reset_password_code")
  role             UserRole  @default(USER)

  accessToken                  AccessToken?
  worksId                      String[]                       @map("works_id") @db.ObjectId
  works                        Work[]
  UserNotificationSubscription UserNotificationSubscription[]
}

model AccessToken {
  id        String    @id @map("_id") @db.ObjectId
  token     String    @unique
  revokedAt DateTime? @map("revoked_at")

  createdAt DateTime @map("created_at")

  userId String @unique @db.ObjectId

  user User? @relation(fields: [userId], references: [id])
}

model UserNotificationSubscription {
  id         String   @id @map("_id") @db.ObjectId
  createdAt  DateTime @map("created_at")
  userId     String   @db.ObjectId
  credentials Json
  notificationType NotificationType @map("notification_type")

  user User @relation(fields: [userId], references: [id])
}
