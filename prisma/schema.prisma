// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Category {
  MANGA
  ANIME
}

model Work {
  id                   String    @id @map("_id") @db.ObjectId
  name                 String
  category             Category
  hasNewChapter        Boolean   @map("has_new_chapter")
  chapters             Float
  url                  String
  recipientId          String?   @unique @map("recipient_id")
  isFinished           Boolean   @default(false) @map("is_finished")
  imageId              String?   @map("image_id")
  nextChapter          Float?    @map("next_chapter")
  nextChapterUpdatedAt DateTime? @map("next_chapter_updated_at")

  createdAt DateTime  @map("created_at")
  updatedAt DateTime? @map("updated_at")

  notifications  Notification[]
  subscribersIds String[]       @map("subscribers_ids") @db.ObjectId
  subscribers    User[]         @relation(fields: [subscribersIds], references: [id])
}

model Notification {
  id          String    @id @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime  @map("created_at")
  readAt      DateTime? @map("read_at")
  recipientId String?   @map("recipent_id")
  Work        Work?     @relation(fields: [workId], references: [id])
  workId      String?   @db.ObjectId
}

model User {
  id           String    @id @map("_id") @db.ObjectId
  email        String    @unique
  name         String
  passwordHash String
  createdAt    DateTime  @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  imageUrl     String?   @default("") @map("image_url")

  accessToken AccessToken?
  worksId     String[]     @map("works_id") @db.ObjectId
  works       Work[]       @relation(fields: [worksId], references: [id])
}

model AccessToken {
  id        String    @id @map("_id") @db.ObjectId
  token     String    @unique
  revokedAt DateTime? @map("revoked_at")

  createdAt DateTime @map("created_at")

  userId String @unique @db.ObjectId

  user User? @relation(fields: [userId], references: [id])
}
